// Generated by @wagmi/cli@0.1.13 on 3/23/2023 at 11:26:31 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlEnumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlEnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterfactualVaultController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterfactualVaultControllerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'vaultIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'computeAddress',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterfactualWalletInstance',
    outputs: [
      {
        name: '',
        internalType: 'contract CounterfactualVault',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vaultCalls',
        internalType: 'struct CounterfactualVaultController.VaultCall[]',
        type: 'tuple[]',
        components: [
          { name: 'vaultId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'call',
            internalType: 'struct CounterfactualVault.Call[]',
            type: 'tuple[]',
            components: [
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
    name: 'executeVaultCalls',
    outputs: [{ name: '', internalType: 'bytes[][]', type: 'bytes[][]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterfactualVaultControllerFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterfactualVaultControllerFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'counterfactualVaultController',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'CounterfactualVaultControllerCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createCounterfactualVaultController',
    outputs: [
      {
        name: '',
        internalType: 'contract CounterfactualVaultController',
        type: 'address',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterfactualVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterfactualVaultABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct CounterfactualVault.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'executeCalls',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PresetMinterPauser
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PresetMinterPauserABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PAUSER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlEnumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlEnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MinimalProxyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const minimalProxyFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'clone',
    outputs: [{ name: 'result', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TSelectData = ReadContractResult<typeof accessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'grantRole'>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'renounceRole'>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'revokeRole'>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlEnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlEnumerableDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlEnumerableGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useAccessControlEnumerableGetRoleMember<
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    'getRoleMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      'getRoleMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    'getRoleMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useAccessControlEnumerableGetRoleMemberCount<
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    'getRoleMemberCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      'getRoleMemberCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    'getRoleMemberCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlEnumerableHasRole<
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlEnumerableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    TFunctionName
  >({ abi: accessControlEnumerableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlEnumerableGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    'grantRole'
  >({
    abi: accessControlEnumerableABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlEnumerableRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    'renounceRole'
  >({
    abi: accessControlEnumerableABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlEnumerableRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    'revokeRole'
  >({
    abi: accessControlEnumerableABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function usePrepareAccessControlEnumerableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlEnumerableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlEnumerableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlEnumerableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlEnumerableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accessControlEnumerableABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlEnumerableABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlEnumerableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlEnumerableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link counterfactualVaultControllerABI}__.
 */
export function useCounterfactualVaultController(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: counterfactualVaultControllerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterfactualVaultControllerABI}__.
 */
export function useCounterfactualVaultControllerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof counterfactualVaultControllerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof counterfactualVaultControllerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterfactualVaultControllerABI,
    ...config,
  } as UseContractReadConfig<
    typeof counterfactualVaultControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"computeAddress"`.
 */
export function useCounterfactualVaultControllerComputeAddress<
  TSelectData = ReadContractResult<
    typeof counterfactualVaultControllerABI,
    'computeAddress'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof counterfactualVaultControllerABI,
      'computeAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterfactualVaultControllerABI,
    functionName: 'computeAddress',
    ...config,
  } as UseContractReadConfig<
    typeof counterfactualVaultControllerABI,
    'computeAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"counterfactualWalletInstance"`.
 */
export function useCounterfactualVaultControllerCounterfactualWalletInstance<
  TSelectData = ReadContractResult<
    typeof counterfactualVaultControllerABI,
    'counterfactualWalletInstance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof counterfactualVaultControllerABI,
      'counterfactualWalletInstance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterfactualVaultControllerABI,
    functionName: 'counterfactualWalletInstance',
    ...config,
  } as UseContractReadConfig<
    typeof counterfactualVaultControllerABI,
    'counterfactualWalletInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"owner"`.
 */
export function useCounterfactualVaultControllerOwner<
  TSelectData = ReadContractResult<
    typeof counterfactualVaultControllerABI,
    'owner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof counterfactualVaultControllerABI,
      'owner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterfactualVaultControllerABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof counterfactualVaultControllerABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__.
 */
export function useCounterfactualVaultControllerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultControllerABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultControllerABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof counterfactualVaultControllerABI,
    TFunctionName
  >({ abi: counterfactualVaultControllerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"executeVaultCalls"`.
 */
export function useCounterfactualVaultControllerExecuteVaultCalls<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultControllerABI,
          'executeVaultCalls'
        >['abi'],
        'executeVaultCalls'
      > & { functionName?: 'executeVaultCalls' }
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultControllerABI,
        'executeVaultCalls'
      > & {
        abi?: never
        functionName?: 'executeVaultCalls'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof counterfactualVaultControllerABI,
    'executeVaultCalls'
  >({
    abi: counterfactualVaultControllerABI,
    functionName: 'executeVaultCalls',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCounterfactualVaultControllerRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultControllerABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultControllerABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof counterfactualVaultControllerABI,
    'renounceOwnership'
  >({
    abi: counterfactualVaultControllerABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCounterfactualVaultControllerTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultControllerABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultControllerABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof counterfactualVaultControllerABI,
    'transferOwnership'
  >({
    abi: counterfactualVaultControllerABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__.
 */
export function usePrepareCounterfactualVaultControllerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultControllerABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultControllerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultControllerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"executeVaultCalls"`.
 */
export function usePrepareCounterfactualVaultControllerExecuteVaultCalls(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultControllerABI,
      'executeVaultCalls'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultControllerABI,
    functionName: 'executeVaultCalls',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultControllerABI,
    'executeVaultCalls'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCounterfactualVaultControllerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultControllerABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultControllerABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultControllerABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCounterfactualVaultControllerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultControllerABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultControllerABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultControllerABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterfactualVaultControllerABI}__.
 */
export function useCounterfactualVaultControllerEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<typeof counterfactualVaultControllerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterfactualVaultControllerABI,
    ...config,
  } as UseContractEventConfig<
    typeof counterfactualVaultControllerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `eventName` set to `"Executed"`.
 */
export function useCounterfactualVaultControllerExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof counterfactualVaultControllerABI, 'Executed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterfactualVaultControllerABI,
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<
    typeof counterfactualVaultControllerABI,
    'Executed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterfactualVaultControllerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCounterfactualVaultControllerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof counterfactualVaultControllerABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterfactualVaultControllerABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof counterfactualVaultControllerABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__.
 */
export function useCounterfactualVaultControllerFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({
    abi: counterfactualVaultControllerFactoryABI,
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__.
 */
export function useCounterfactualVaultControllerFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultControllerFactoryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultControllerFactoryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof counterfactualVaultControllerFactoryABI,
    TFunctionName
  >({ abi: counterfactualVaultControllerFactoryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__ and `functionName` set to `"createCounterfactualVaultController"`.
 */
export function useCounterfactualVaultControllerFactoryCreateCounterfactualVaultController<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultControllerFactoryABI,
          'createCounterfactualVaultController'
        >['abi'],
        'createCounterfactualVaultController'
      > & { functionName?: 'createCounterfactualVaultController' }
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultControllerFactoryABI,
        'createCounterfactualVaultController'
      > & {
        abi?: never
        functionName?: 'createCounterfactualVaultController'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof counterfactualVaultControllerFactoryABI,
    'createCounterfactualVaultController'
  >({
    abi: counterfactualVaultControllerFactoryABI,
    functionName: 'createCounterfactualVaultController',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__.
 */
export function usePrepareCounterfactualVaultControllerFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultControllerFactoryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultControllerFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultControllerFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__ and `functionName` set to `"createCounterfactualVaultController"`.
 */
export function usePrepareCounterfactualVaultControllerFactoryCreateCounterfactualVaultController(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultControllerFactoryABI,
      'createCounterfactualVaultController'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultControllerFactoryABI,
    functionName: 'createCounterfactualVaultController',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultControllerFactoryABI,
    'createCounterfactualVaultController'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__.
 */
export function useCounterfactualVaultControllerFactoryEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof counterfactualVaultControllerFactoryABI,
      TEventName
    >,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterfactualVaultControllerFactoryABI,
    ...config,
  } as UseContractEventConfig<
    typeof counterfactualVaultControllerFactoryABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterfactualVaultControllerFactoryABI}__ and `eventName` set to `"CounterfactualVaultControllerCreated"`.
 */
export function useCounterfactualVaultControllerFactoryCounterfactualVaultControllerCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof counterfactualVaultControllerFactoryABI,
      'CounterfactualVaultControllerCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterfactualVaultControllerFactoryABI,
    eventName: 'CounterfactualVaultControllerCreated',
    ...config,
  } as UseContractEventConfig<
    typeof counterfactualVaultControllerFactoryABI,
    'CounterfactualVaultControllerCreated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link counterfactualVaultABI}__.
 */
export function useCounterfactualVault(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: counterfactualVaultABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultABI}__.
 */
export function useCounterfactualVaultWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterfactualVaultABI, TFunctionName>({
    abi: counterfactualVaultABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultABI}__ and `functionName` set to `"executeCalls"`.
 */
export function useCounterfactualVaultExecuteCalls<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultABI,
          'executeCalls'
        >['abi'],
        'executeCalls'
      > & { functionName?: 'executeCalls' }
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultABI,
        'executeCalls'
      > & {
        abi?: never
        functionName?: 'executeCalls'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterfactualVaultABI, 'executeCalls'>(
    {
      abi: counterfactualVaultABI,
      functionName: 'executeCalls',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterfactualVaultABI}__ and `functionName` set to `"initialize"`.
 */
export function useCounterfactualVaultInitialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof counterfactualVaultABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof counterfactualVaultABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterfactualVaultABI, 'initialize'>({
    abi: counterfactualVaultABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultABI}__.
 */
export function usePrepareCounterfactualVaultWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterfactualVaultABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultABI}__ and `functionName` set to `"executeCalls"`.
 */
export function usePrepareCounterfactualVaultExecuteCalls(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterfactualVaultABI,
      'executeCalls'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultABI,
    functionName: 'executeCalls',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultABI,
    'executeCalls'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterfactualVaultABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareCounterfactualVaultInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterfactualVaultABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterfactualVaultABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterfactualVaultABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20Burnable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, TFunctionName>({
    abi: erc20BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'approve'>({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'burn'>({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burnFrom'>['abi'],
        'burnFrom'
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'burnFrom'> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'burnFrom'>({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20BurnableABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'decreaseAllowance'>({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20BurnableABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'increaseAllowance'>({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'transfer'>({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'transferFrom'>({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20Pausable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20PausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20PausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PausableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20PausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PausableAllowance<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PausableBalanceOf<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PausableDecimals<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PausableName<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"paused"`.
 */
export function useErc20PausablePaused<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'paused'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, 'paused', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PausableSymbol<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PausableTotalSupply<
  TSelectData = ReadContractResult<typeof erc20PausableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PausableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20PausableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PausableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, TFunctionName>({
    abi: erc20PausableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PausableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PausableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, 'approve'>({
    abi: erc20PausableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PausableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PausableABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PausableABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, 'decreaseAllowance'>({
    abi: erc20PausableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PausableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PausableABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PausableABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, 'increaseAllowance'>({
    abi: erc20PausableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PausableTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PausableABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, 'transfer'>({
    abi: erc20PausableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PausableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PausableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, 'transferFrom'>({
    abi: erc20PausableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function usePrepareErc20PausableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PausableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PausableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PausableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PausableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PausableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PausableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PausableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20PausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PausableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Paused"`.
 */
export function useErc20PausablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PausableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useErc20PausableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauser(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20PresetMinterPauserABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauserRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useErc20PresetMinterPauserDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useErc20PresetMinterPauserMinterRole<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'MINTER_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'MINTER_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'MINTER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'MINTER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 */
export function useErc20PresetMinterPauserPauserRole<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'PAUSER_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'PAUSER_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'PAUSER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'PAUSER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PresetMinterPauserAllowance<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PresetMinterPauserBalanceOf<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PresetMinterPauserDecimals<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'decimals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useErc20PresetMinterPauserGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useErc20PresetMinterPauserGetRoleMember<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'getRoleMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'getRoleMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'getRoleMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useErc20PresetMinterPauserGetRoleMemberCount<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'getRoleMemberCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'getRoleMemberCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'getRoleMemberCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"hasRole"`.
 */
export function useErc20PresetMinterPauserHasRole<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PresetMinterPauserName<
  TSelectData = ReadContractResult<typeof erc20PresetMinterPauserABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"paused"`.
 */
export function useErc20PresetMinterPauserPaused<
  TSelectData = ReadContractResult<typeof erc20PresetMinterPauserABI, 'paused'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'paused',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc20PresetMinterPauserSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PresetMinterPauserSymbol<
  TSelectData = ReadContractResult<typeof erc20PresetMinterPauserABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PresetMinterPauserTotalSupply<
  TSelectData = ReadContractResult<
    typeof erc20PresetMinterPauserABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PresetMinterPauserABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauserWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    TFunctionName
  >({ abi: erc20PresetMinterPauserABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PresetMinterPauserApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'approve'>({
    abi: erc20PresetMinterPauserABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20PresetMinterPauserBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'burn'
        >['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'burn'
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'burn'>({
    abi: erc20PresetMinterPauserABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20PresetMinterPauserBurnFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'burnFrom'
        >['abi'],
        'burnFrom'
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'burnFrom'
      > & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'burnFrom'>(
    {
      abi: erc20PresetMinterPauserABI,
      functionName: 'burnFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PresetMinterPauserDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    'decreaseAllowance'
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"grantRole"`.
 */
export function useErc20PresetMinterPauserGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    'grantRole'
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PresetMinterPauserIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    'increaseAllowance'
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"mint"`.
 */
export function useErc20PresetMinterPauserMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'mint'
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'mint'>({
    abi: erc20PresetMinterPauserABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"pause"`.
 */
export function useErc20PresetMinterPauserPause<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'pause'
        >['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'pause'
      > & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'pause'>({
    abi: erc20PresetMinterPauserABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useErc20PresetMinterPauserRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    'renounceRole'
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useErc20PresetMinterPauserRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    'revokeRole'
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PresetMinterPauserTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'transfer'>(
    {
      abi: erc20PresetMinterPauserABI,
      functionName: 'transfer',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PresetMinterPauserTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    'transferFrom'
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"unpause"`.
 */
export function useErc20PresetMinterPauserUnpause<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          'unpause'
        >['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        'unpause'
      > & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, 'unpause'>({
    abi: erc20PresetMinterPauserABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function usePrepareErc20PresetMinterPauserWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PresetMinterPauserApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20PresetMinterPauserBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20PresetMinterPauserBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'burnFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'burnFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PresetMinterPauserDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareErc20PresetMinterPauserGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PresetMinterPauserIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc20PresetMinterPauserMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareErc20PresetMinterPauserPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'pause'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareErc20PresetMinterPauserRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareErc20PresetMinterPauserRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PresetMinterPauserTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PresetMinterPauserTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareErc20PresetMinterPauserUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PresetMinterPauserABI,
    'unpause'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauserEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PresetMinterPauserApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Paused"`.
 */
export function useErc20PresetMinterPauserPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useErc20PresetMinterPauserRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20PresetMinterPauserABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20PresetMinterPauserABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useErc20PresetMinterPauserRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useErc20PresetMinterPauserRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PresetMinterPauserTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useErc20PresetMinterPauserUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'grantRole'>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'renounceRole'>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'revokeRole'>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlEnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlEnumerableGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useIAccessControlEnumerableGetRoleMember<
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    'getRoleMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      'getRoleMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    'getRoleMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useIAccessControlEnumerableGetRoleMemberCount<
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    'getRoleMemberCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      'getRoleMemberCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    'getRoleMemberCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlEnumerableHasRole<
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >({ abi: iAccessControlEnumerableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlEnumerableGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    'grantRole'
  >({
    abi: iAccessControlEnumerableABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlEnumerableRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    'renounceRole'
  >({
    abi: iAccessControlEnumerableABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlEnumerableRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    'revokeRole'
  >({
    abi: iAccessControlEnumerableABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function usePrepareIAccessControlEnumerableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlEnumerableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlEnumerableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlEnumerableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlEnumerableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlEnumerableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAccessControlEnumerableABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlEnumerableABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlEnumerableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlEnumerableABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlEnumerableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlEnumerableABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155BalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc1155ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155BalanceOfBatch<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'balanceOfBatch'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'balanceOfBatch', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof ierc1155ABI, 'balanceOfBatch', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc1155ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, TFunctionName>({
    abi: ierc1155ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155SafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'safeBatchTransferFrom'>({
    abi: ierc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'safeTransferFrom'>({
    abi: ierc1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'setApprovalForAll'>({
    abi: ierc1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function usePrepareIerc1155Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155SafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155TransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155TransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link minimalProxyFactoryABI}__.
 */
export function useMinimalProxyFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: minimalProxyFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalProxyFactoryABI}__.
 */
export function useMinimalProxyFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalProxyFactoryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof minimalProxyFactoryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof minimalProxyFactoryABI, TFunctionName>({
    abi: minimalProxyFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalProxyFactoryABI}__ and `functionName` set to `"clone"`.
 */
export function useMinimalProxyFactoryClone<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalProxyFactoryABI,
          'clone'
        >['abi'],
        'clone'
      > & { functionName?: 'clone' }
    : UseContractWriteConfig<TMode, typeof minimalProxyFactoryABI, 'clone'> & {
        abi?: never
        functionName?: 'clone'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof minimalProxyFactoryABI, 'clone'>({
    abi: minimalProxyFactoryABI,
    functionName: 'clone',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalProxyFactoryABI}__.
 */
export function usePrepareMinimalProxyFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof minimalProxyFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalProxyFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalProxyFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalProxyFactoryABI}__ and `functionName` set to `"clone"`.
 */
export function usePrepareMinimalProxyFactoryClone(
  config: Omit<
    UsePrepareContractWriteConfig<typeof minimalProxyFactoryABI, 'clone'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalProxyFactoryABI,
    functionName: 'clone',
    ...config,
  } as UsePrepareContractWriteConfig<typeof minimalProxyFactoryABI, 'clone'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TSelectData = ReadContractResult<typeof ownableABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    ...config,
  } as UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<
  TSelectData = ReadContractResult<typeof pausableABI, 'paused'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof pausableABI, 'paused', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    ...config,
  } as UseContractEventConfig<typeof pausableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof pausableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof pausableABI, 'Unpaused'>)
}
